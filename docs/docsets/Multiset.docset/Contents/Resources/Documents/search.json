{"Structs/MultisetIndex.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","abstract":"<p>MultisetIndex is Equatable</p>","parent_name":"MultisetIndex"},"Structs/MultisetIndex.html#/s:8Multiset0A5IndexV1loiSbACyqd__G_AEts8HashableRd__lFZ":{"name":"<(_:_:)","abstract":"<p>MultisetIndex is Comparable</p>","parent_name":"MultisetIndex"},"Structs/MultisetIndex.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"MultisetIndex"},"Structs/Multiset/MultisetIterator.html#/s:s16IteratorProtocolP4next7ElementQzSgyF":{"name":"next()","parent_name":"MultisetIterator"},"Structs/Multiset.html#/s:8MultisetAAVAByxGycfc":{"name":"init()","abstract":"<p>Creates an empty multiset:</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGs10DictionaryVyxSiGcfc":{"name":"init(_:)","abstract":"<p>Create a Multiset from another dictionary:</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGqd__c7ElementQyd__Rszs8SequenceRd__lufc":{"name":"init(_:)","abstract":"<p>Create a new multiset from a finite sequence of items:</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGx_xxdtcfc":{"name":"init(_:_:_:)","abstract":"<p>Create a new multiset from a variadic sequence of 2 or more items:</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGSi15minimumCapacity_tcfc":{"name":"init(minimumCapacity:)","abstract":"<p>Create an empty Multiset with preallocated capacity.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8capacitySivp":{"name":"capacity","abstract":"<p>Get capacity of the underlying dictionary</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV15reserveCapacityySiF":{"name":"reserveCapacity(_:)","abstract":"<p>Set capacity of the underlying dictionary</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGx12arrayLiterald_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Create a multiset containing the elements of the given array literal.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGx_Sit17dictionaryLiterald_tcfc":{"name":"init(dictionaryLiteral:)","abstract":"<p>Creates a multiset containing the elements of the given dictionary literal.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV5countSivp":{"name":"count","abstract":"<p>The number of elements in the multiset</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV13distinctCountSivp":{"name":"distinctCount","abstract":"<p>The number of distinct elements in the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV5countSix2of_tF":{"name":"count(of:)","abstract":"<p>The number of elements of a particular type in the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV6insertyx_Si5counttF":{"name":"insert(_:count:)","abstract":"<p>Insert a number of equal elements (or one if no count specified)</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV6removeSbx_Si5counttF":{"name":"remove(_:count:)","abstract":"<p>Remove a number of equal elements (or one if no count specified)</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV6removeSix10ifPossible_Si5counttF":{"name":"remove(ifPossible:count:)","abstract":"<p>Remove a number of equal elements as possible (try for just one if no count specified)</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV9removeAllSixF":{"name":"removeAll(_:)","abstract":"<p>Remove all of a particular element</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV9removeAllSiqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"removeAll(_:)","abstract":"<p>Remove all occurrences of a sequence of elements</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV9removeAllySb15keepingCapacity_tF":{"name":"removeAll(keepingCapacity:)","abstract":"<p>Removes all elements from the multiset</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV6filterAByxGSbxKcKF":{"name":"filter(_:)","abstract":"<p>Returns a new multiset containing the elements of the multiset that satisfy","parent_name":"Multiset"},"Structs/Multiset/MultisetIterator.html":{"name":"MultisetIterator","abstract":"<p>This iterator works through each element in the dictionary</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:s8SequenceP12makeIterator0C0QzyF":{"name":"makeIterator()","parent_name":"Multiset"},"Structs/Multiset.html#/s:s10CollectionP5Index":{"name":"Index","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV10startIndexAA0aC0VyxGvp":{"name":"startIndex","abstract":"<p>The starting position for iterating members of the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8endIndexAA0aC0VyxGvp":{"name":"endIndex","abstract":"<p>The <q>past the end</q> position for the multiset&mdash;that is, the position one","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVxAA0A5IndexVyxGcip":{"name":"subscript(_:)","abstract":"<p>Accesses the member at the given position.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV5indexAA0A5IndexVyxGAF5after_tF":{"name":"index(after:)","abstract":"<p>Finds the index which immediately follows the given index</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV10firstIndexAA0aC0VyxGSgx2of_tF":{"name":"firstIndex(of:)","abstract":"<p>Returns the index of the first given element in the set, or <code>nil</code> if the","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV5firstxSgvp":{"name":"first","abstract":"<p>The first element of the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV6removexAA0A5IndexVyxG2at_tF":{"name":"remove(at:)","abstract":"<p>Removes the element at the given index of the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV11descriptionSSvp":{"name":"description","abstract":"<p>A string that represents the contents of the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>A string that represents the contents of the set, suitable for debugging.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV2eeoiSbAByxG_ADtFZ":{"name":"==(_:_:)","abstract":"<p>Returns a Boolean value indicating whether two multisets are equal</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV4hashXeXeF":{"name":"hash(into:)","abstract":"<p>Hashes the essential components of this value by feeding them into the","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8containsSbxF":{"name":"contains(_:)","abstract":"<p>Returns a Boolean value that indicates whether the given element exists","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV5unionAByxGADF":{"name":"union(_:)","abstract":"<p>Returns a new multiset with elements from this multiset and the given multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV12intersectionAByxGADF":{"name":"intersection(_:)","abstract":"<p>Returns a new multiset with elements that are common to both this multiset","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV19symmetricDifferenceAByxGADF":{"name":"symmetricDifference(_:)","abstract":"<p>Returns a new multiset with elements that are in either this multiset or","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV11subtractingAByxGADF":{"name":"subtracting(_:)","abstract":"<p>Returns a new multiset with elements that are in this multiset but NOT in","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8isSubsetSbAByxG2of_tF":{"name":"isSubset(of:)","abstract":"<p>Returns a Boolean value that indicates whether this multiset is a subset of","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV10isDisjointSbAByxG4with_tF":{"name":"isDisjoint(with:)","abstract":"<p>Returns a Boolean value that indicates whether this multiset is disjoint from","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV10isSupersetSbAByxG2of_tF":{"name":"isSuperset(of:)","abstract":"<p>Returns a Boolean value that indicates whether this multiset is a superset of","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV7isEmptySbvp":{"name":"isEmpty","abstract":"<p>A Boolean value that indicates whether the multiset is empty.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:s10SetAlgebraP6insertSb8inserted_7ElementQz17memberAfterInserttAFF":{"name":"insert(_:)","abstract":"<p>Inserts the given element in the multiset.","parent_name":"Multiset"},"Structs/Multiset.html#/s:s10SetAlgebraP6update7ElementQzSgAE4with_tF":{"name":"update(with:)","abstract":"<p>Updates the element in the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV6removexSgxF":{"name":"remove(_:)","abstract":"<p>Removes one of the given element from the multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV9formUnionyAByxGF":{"name":"formUnion(_:)","abstract":"<p>MARK: Mutating set functions: union, intersection, symmetricDifference, subtract","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV16formIntersectionyAByxGF":{"name":"formIntersection(_:)","abstract":"<p>Mutating version of intersection</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV23formSymmetricDifferenceyAByxGF":{"name":"formSymmetricDifference(_:)","abstract":"<p>Mutating version of symmetricDifference</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8subtractyAByxGF":{"name":"subtract(_:)","abstract":"<p>Mutating version of subtracting</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV14isStrictSubsetSbAByxG2of_tF":{"name":"isStrictSubset(of:)","abstract":"<p>As for isSubset but if the two multisets are equal then return false</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV16isStrictSupersetSbAByxG2of_tF":{"name":"isStrictSuperset(of:)","abstract":"<p>As for isSuperset but if the two multisets are equal then return false</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAVAByxGqd__cs8SequenceRd__x_Sit7ElementRtd__lufc":{"name":"init(_:)","abstract":"<p>MARK: Initialisers:","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8isSubsetSbqd__2of_t7ElementQyd__Rszs8SequenceRd__lF":{"name":"isSubset(of:)","abstract":"<p>SEQUENCE VERSION OF: func isSubset(of other: Self) -&gt; Bool</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV14isStrictSubsetSbqd__2of_t7ElementQyd__Rszs8SequenceRd__lF":{"name":"isStrictSubset(of:)","abstract":"<p>SEQUENCE VERSION OF: func isStrictSubset(of other: Self) -&gt; Bool {</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV10isSupersetSbqd__2of_t7ElementQyd__Rszs8SequenceRd__lF":{"name":"isSuperset(of:)","abstract":"<p>SEQUENCE VERSION OF: func isSuperset(of other: Self) -&gt; Bool</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV16isStrictSupersetSbqd__2of_t7ElementQyd__Rszs8SequenceRd__lF":{"name":"isStrictSuperset(of:)","abstract":"<p>SEQUENCE VERSION OF: func isStrictSuperset(of other: Self) -&gt; Bool {</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV10isDisjointSbqd__4with_t7ElementQyd__Rszs8SequenceRd__lF":{"name":"isDisjoint(with:)","abstract":"<p>SEQUENCE VERSION OF: func isDisjoint(with other: Self) -&gt; Bool</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV5unionAByxGqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"union(_:)","abstract":"<p>SEQUENCE VERSION OF: func union(_ other: Self) -&gt; Self</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV12intersectionAByxGqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"intersection(_:)","abstract":"<p>SEQUENCE VERSION OF: func intersection(_ other: Self) -&gt; Self</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV19symmetricDifferenceAByxGqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"symmetricDifference(_:)","abstract":"<p>SEQUENCE VERSION OF: func symmetricDifference(_ other: Self) -&gt; Self</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV11subtractingAByxGqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"subtracting(_:)","abstract":"<p>SEQUENCE VERSION OF: func subtracting(_ other: Self) -&gt; Self</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV9formUnionyqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"formUnion(_:)","abstract":"<p>SEQUENCE VERSION OF: mutating func formUnion(_ other: Self)</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV16formIntersectionyqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"formIntersection(_:)","abstract":"<p>As for formIntersection but using a sequence of Elements rather than another multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV23formSymmetricDifferenceyqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"formSymmetricDifference(_:)","abstract":"<p>As for formSymmetricDifference but using a sequence of Elements rather than another multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html#/s:8MultisetAAV8subtractyqd__7ElementQyd__Rszs8SequenceRd__lF":{"name":"subtract(_:)","abstract":"<p>As for subtract but using a sequence of Elements rather than another multiset.</p>","parent_name":"Multiset"},"Structs/Multiset.html":{"name":"Multiset","abstract":"<p>A <q>Multiset</q> is an unordered collection of hashable elements.</p>"},"Structs/MultisetIndex.html":{"name":"MultisetIndex","abstract":"<h2 id='multisetindex' class='heading'>MultisetIndex</h2>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}